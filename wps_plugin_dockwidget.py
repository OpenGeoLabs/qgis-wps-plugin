# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WPSWidgetDockWidget
                                 A QGIS plugin
 WPS PLugin OpenGeoLabs
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-06-05
        git sha              : $Format:%H$
        copyright            : (C) 2021 by OpenGeoLabs
        email                : jan.ruzicka.vsb@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic, QtWidgets
from qgis.utils import iface
from qgis.core import *
from qgis.gui import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtWidgets import *

import json

from .connect import *
from .wps_dialog import WpsDialog
from .check_ows_lib import CheckOwsLib

from owslib.wps import WebProcessingService
from owslib.wps import ComplexDataInput


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'wps_plugin_dockwidget_base.ui'))


class WPSWidgetDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, iface, parent=None):
        """Constructor."""
        super(WPSWidgetDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.iface = iface
        self.setupUi(self)
        self.first_start = True

        self.settings = QSettings('QGIS_WPS_Plugin')

        tree = self.treeWidgetServices
        tree.itemSelectionChanged.connect(self.handleSelected)
        tree.itemDoubleClicked.connect(self.handleDoubleClicked)
        self.pushButtonLoad.clicked.connect(self.executeProcess)
        self.root = QTreeWidgetItem(tree)
        self.root.setText(0, 'WPS Services')
        self.loadServices(self.root)
        self.treeWidgetServices.expandItem(self.root)
        self.treeWidgetServices.customContextMenuRequested.connect(self.menuContextTree)
        self.root.setExpanded(True)
        
    def appendServiceToTree(self, parent, service_url):
        service = QTreeWidgetItem(parent)
        service.setText(0, service_url)
        service.setData(0, Qt.UserRole, service_url)
        service.setExpanded(True)

    def loadServices(self, parent):
        self.services = self.settings.value("services", [])
        if self.services is None:
            self.services = []
        for service_url in self.services:
            self.appendServiceToTree(parent, service_url)

    def menuContextTree(self, point):
        # Infos about the node selected.
        index = self.treeWidgetServices.indexAt(point)

        if not index.isValid():
            return

        item = self.treeWidgetServices.itemAt(point)
        name = item.text(0)  # The text of the node.

        # We build the menu.
        menu = QtWidgets.QMenu()
#         action = menu.addAction("Souris au-dessus de")
#         action = menu.addAction(name)
#         menu.addSeparator()
        if item.parent() is None:
            action_new_connection = menu.addAction(self.tr("New Service"))
            action_new_connection.triggered.connect(self.newService)
        else:
            if item.parent().parent() is None:
                action_delete_connection = menu.addAction(self.tr("Remove Service"))
                action_delete_connection.triggered.connect(self.removeService)
            else:
                action_run_process = menu.addAction(self.tr("Execute"))
                action_run_process.triggered.connect(self.executeProcess)

        menu.exec_(self.treeWidgetServices.mapToGlobal(point))

    def saveServices(self):
        self.settings.setValue("services", self.services)

    def newService(self):
        dlg = QInputDialog(self)
        dlg.setWindowTitle(self.tr('New Service'))
        dlg.setInputMode(QInputDialog.TextInput)
        dlg.setLabelText(self.tr('Enter URL of the service'))
        dlg.resize(500, 100)
        if dlg.exec_():
            text = dlg.textValue()
            if text in self.services:
                QMessageBox.information(
                            None, self.tr("INFO:"),
                            self.tr("The service is already registered"))
            else:
                self.services.append(text)
                self.appendServiceToTree(self.root, text)
                self.saveServices()

    def removeService(self):
        reply = QMessageBox.question(
                        self,
                        self.tr("Remove service"),
                        "This will remove the service from the list. Are you sure?",
                        QMessageBox.Yes,
                        QMessageBox.No,
                    )

        if reply == QMessageBox.Yes:
            service = self.getSelectedItem()
            service_data = service.data(0, Qt.UserRole)
            parent = service.parent()
            parent.removeChild(service)
            self.services.remove(service_data)
            self.saveServices()

    def executeProcess(self):
        process = self.getSelectedItem()
        process_data = process.data(0, Qt.UserRole)
        items = process_data.split('|')
        if self.first_start == True:
           self.first_start = False
           self.dlg = WpsDialog(self.iface)

        self.dlg.setServiceUrl(items[0])
        self.dlg.setProcessIdentifier(items[2])
        self.dlg.loadProcess()
        # show the dialog
        self.dlg.show()

    def handleDoubleClicked(self, item, column):
        if item.data(0, Qt.UserRole) is not None:
            id = item.data(0, Qt.UserRole)
            if '|' in id:
                self.executeProcess()

    def handleSelected(self):
        self.pushButtonLoad.setEnabled(False)
        for item in self.treeWidgetServices.selectedItems():
            if item.data(0, Qt.UserRole) is not None:
                id = item.data(0, Qt.UserRole)
                if '|' not in id:
                    # service
                    self.loadProcesses(id)
                else:
                    # process
                    self.pushButtonLoad.setEnabled(True)
                    self.processSelected(id)

    def getSelectedItem(self):
        for item in self.treeWidgetServices.selectedItems():
            return item

    def loadProcesses(self, url):
        self.setCursor(Qt.WaitCursor)
        self.__load_processes = GetProcesses()
        self.__load_processes.setUrl(url)
        self.__load_processes.statusChanged.connect(self.onLoadProcessesResponse)
        self.__load_processes.start()

    def onLoadProcessesResponse(self, response):
        if response.status == 200:
            self.processes = response.data
            service = self.getSelectedItem()
            for i in reversed(range(service.childCount())):
                service.removeChild(service.child(i))
            service_url = service.data(0, Qt.UserRole)
            id = 0
            for proc in self.processes:
                process = QTreeWidgetItem(service)
                process.setText(0, '[{}] {}'.format(proc.identifier, proc.title))
                process.setData(0, Qt.UserRole, service_url + '|' + str(id) + '|' + str(proc.identifier))
#                 print(proc.title)
                id += 1
        else:
            QMessageBox.information(None, self.tr("ERROR:"), self.tr("Error loading processes"))
        self.setCursor(Qt.ArrowCursor)

    def showProcessesDescription(self, index):
        desc = "[" + self.processes[index].identifier + "]: "
        if self.processes[index].title:
            desc += self.processes[index].title
        if self.processes[index].abstract:
            desc += "\n\n" + self.processes[index].abstract

        self.textEditProcessDescription.setText(desc)

    def processSelected(self, id):
        current_index = int(id.split('|')[1])
        self.showProcessesDescription(current_index)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
